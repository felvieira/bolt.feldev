FROM node:20.18.0-bookworm AS base
# Definimos um único WORKDIR no estágio base
WORKDIR /app
SHELL ["/bin/bash", "-c"]

# Copia os arquivos de dependência para aproveitar cache
COPY package.json pnpm-lock.yaml* ./

# Atualiza npm, instala Corepack, configura pnpm
RUN npm install -g npm@latest && \
    npm install -g corepack@latest && \
    corepack enable pnpm && \
    corepack use pnpm@latest-10 && \
    npm cache clean --force

# Instala as dependências do projeto
RUN pnpm install --frozen-lockfile

# --- Início do estágio de Build ---
FROM base AS builder
# Não redefinimos o WORKDIR aqui - usando o mesmo /app do estágio base

# Copiar arquivos de configuração primeiro (melhor utilização de cache)
COPY tsconfig.json remix.config.js vite.config.ts uno.config.ts ./

# Agora copiar todos os outros arquivos do projeto
COPY . .

# Ajusta permissões e corrige finais de linha para os scripts
RUN chmod +x ./express-entrypoint.sh && \
    sed -i 's/\r$//' ./express-entrypoint.sh && \
    chmod +x ./supabase-direct-config.sh && \
    sed -i 's/\r$//' ./supabase-direct-config.sh

# Instalar sass explicitamente
RUN pnpm add -D sass

# Executa o build durante a criação da imagem
RUN pnpm run build

# Verifica se o build foi bem-sucedido
RUN if [ ! -f "/app/build/server/index.js" ]; then \
    echo "ERROR: Build failed, server file not found!" && \
    exit 1; \
    else \
    echo "Build completed successfully!"; \
    fi

# --- Início do estágio de Production ---
FROM node:20.18.0-bookworm-slim

# Instalação de dependências mínimas necessárias
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssl \
    ca-certificates \
    curl \
    netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Mantemos o mesmo WORKDIR em todos os estágios
WORKDIR /app

# Define argumentos de build para segredos e variáveis de ambiente
ARG SESSION_SECRET
ARG SUPABASE_URL
ARG SUPABASE_SERVICE_KEY
ARG SUPABASE_ANON_KEY
ARG REDIS_URL
ARG NODE_ENV
ARG RUNNING_IN_DOCKER=true

# Seta as variáveis de ambiente na imagem final
ENV NODE_ENV=${NODE_ENV:-production} \
    RUNNING_IN_DOCKER=${RUNNING_IN_DOCKER} \
    SESSION_SECRET=${SESSION_SECRET} \
    SUPABASE_URL=${SUPABASE_URL} \
    SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY} \
    SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY} \
    REDIS_URL=${REDIS_URL}

# Copia apenas os arquivos necessários do estágio de build
COPY --from=builder /app/build ./build
COPY --from=builder /app/public ./public
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./
COPY --from=builder /app/server.js ./
COPY --from=builder /app/express-entrypoint.sh ./
COPY --from=builder /app/supabase-direct-config.sh ./
COPY --from=builder /app/utils/redis-session.server.ts ./utils/

# Garantir que o script de entrypoint tenha permissão de execução
RUN chmod +x ./express-entrypoint.sh ./supabase-direct-config.sh

# Cria uma versão básica dos arquivos de ambiente
RUN echo "### Criando arquivos de ambiente básicos ###" && \
    { \
      echo "# .env.local - para o runtime da aplicação"; \
      echo "SESSION_SECRET=${SESSION_SECRET}"; \
      echo "SUPABASE_URL=${SUPABASE_URL}"; \
      echo "SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}"; \
      echo "SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}"; \
      echo "REDIS_URL=${REDIS_URL}"; \
      echo "DATABASE_URL=${DATABASE_URL}"; \
      echo "NODE_ENV=${NODE_ENV:-production}"; \
      echo "RUNNING_IN_DOCKER=true"; \
      echo "DEFAULT_NUM_CTX=${DEFAULT_NUM_CTX}"; \
      echo "GROQ_API_KEY=${GROQ_API_KEY}"; \
      echo "HuggingFace_API_KEY=${HuggingFace_API_KEY}"; \
      echo "OPENAI_API_KEY=${OPENAI_API_KEY}"; \
      echo "ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}"; \
      echo "OPEN_ROUTER_API_KEY=${OPEN_ROUTER_API_KEY}"; \
      echo "GOOGLE_GENERATIVE_AI_API_KEY=${GOOGLE_GENERATIVE_AI_API_KEY}"; \
      echo "OLLAMA_API_BASE_URL=${OLLAMA_API_BASE_URL}"; \
      echo "OPENAI_LIKE_API_BASE_URL=${OPENAI_LIKE_API_BASE_URL}"; \
      echo "OPENAI_LIKE_API_KEY=${OPENAI_LIKE_API_KEY}"; \
      echo "TOGETHER_API_BASE_URL=${TOGETHER_API_BASE_URL}"; \
      echo "TOGETHER_API_KEY=${TOGETHER_API_KEY}"; \
      echo "DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}"; \
      echo "HYPERBOLIC_API_KEY=${HYPERBOLIC_API_KEY}"; \
      echo "HYPERBOLIC_API_BASE_URL=${HYPERBOLIC_API_BASE_URL}"; \
      echo "MISTRAL_API_KEY=${MISTRAL_API_KEY}"; \
      echo "COHERE_API_KEY=${COHERE_API_KEY}"; \
      echo "LMSTUDIO_API_BASE_URL=${LMSTUDIO_API_BASE_URL}"; \
      echo "XAI_API_KEY=${XAI_API_KEY}"; \
      echo "PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}"; \
      echo "AWS_BEDROCK_CONFIG=${AWS_BEDROCK_CONFIG}"; \
      echo "VITE_LOG_LEVEL=${VITE_LOG_LEVEL:-debug}"; \
    } > .env.local && \
    cp .env.local .env

# Cria o diretório para sessão com permissões apropriadas
RUN mkdir -p /app/session-data && chmod 777 /app/session-data

# Configuração de healthcheck para monitorar a saúde do serviço
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:5173/health || exit 1

# Definir usuário não-root para segurança
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 expressuser \
    && chown -R expressuser:nodejs /app

USER expressuser

# Expõe a porta da aplicação
EXPOSE 5173

# Executa apenas o script de entrypoint do Express
CMD ["bash", "/app/express-entrypoint.sh"]
