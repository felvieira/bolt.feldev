FROM node:20.18.0-bookworm AS base
# Definimos um único WORKDIR no estágio base
WORKDIR /app
SHELL ["/bin/bash", "-c"]

# Copia os arquivos de dependência para aproveitar cache
COPY package.json pnpm-lock.yaml* ./

# Atualiza npm, instala Corepack, configura pnpm com versão específica
RUN npm install -g npm@latest && \
    npm install -g corepack@latest && \
    corepack enable pnpm && \
    corepack use pnpm@10.6.4 && \
    npm cache clean --force

# Instala as dependências do projeto E adiciona sass explicitamente
RUN pnpm install --frozen-lockfile && \
    pnpm add -D sass && \
    pnpm add -D sass-embedded && \
    pnpm list sass

# --- Início do estágio de Build ---
FROM base AS builder
# Não redefinimos o WORKDIR aqui - usando o mesmo /app do estágio base

# Copiar arquivos de configuração primeiro (melhor utilização de cache)
# Corrigido: remix.config.js -> remix.config.mjs
COPY tsconfig.json remix.config.mjs vite.config.ts uno.config.ts ./

# Agora copiar todos os outros arquivos do projeto
COPY . .

# Ajusta permissões e corrige finais de linha para os scripts
RUN chmod +x ./express-entrypoint.sh && \
    sed -i 's/\r$//' ./express-entrypoint.sh && \
    chmod +x ./supabase-direct-config.sh && \
    sed -i 's/\r$//' ./supabase-direct-config.sh

# Garantir que o sass está instalado antes do build
RUN pnpm list sass && \
    echo "Verificando se sass está instalado..." && \
    echo "Versão do PNPM: $(pnpm --version)"

# Executa o build durante a criação da imagem
RUN pnpm run build

# Verifica se o build foi bem-sucedido
RUN if [ ! -f "/app/build/server/index.js" ]; then \
    echo "ERROR: Build failed, server file not found!" && \
    exit 1; \
    else \
    echo "Build completed successfully!"; \
    fi

# --- Início do estágio de Production ---
FROM node:20.18.0-bookworm-slim

# Instalação de dependências mínimas necessárias
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssl \
    ca-certificates \
    curl \
    netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Mantemos o mesmo WORKDIR em todos os estágios
WORKDIR /app

# Define argumentos de build para segredos e variáveis de ambiente
ARG SESSION_SECRET
ARG SUPABASE_URL
ARG SUPABASE_SERVICE_KEY
ARG SUPABASE_ANON_KEY
ARG REDIS_URL
ARG NODE_ENV
ARG RUNNING_IN_DOCKER=true

# Seta as variáveis de ambiente na imagem final
ENV NODE_ENV=${NODE_ENV:-production} \
    RUNNING_IN_DOCKER=${RUNNING_IN_DOCKER} \
    SESSION_SECRET=${SESSION_SECRET} \
    SUPABASE_URL=${SUPABASE_URL} \
    SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY} \
    SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY} \
    REDIS_URL=${REDIS_URL}

# Copia apenas os arquivos necessários do estágio de build
COPY --from=builder /app/build ./build
COPY --from=builder /app/public ./public
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./
COPY --from=builder /app/server.js ./
COPY --from=builder /app/express-entrypoint.sh ./
COPY --from=builder /app/supabase-direct-config.sh ./
COPY --from=builder /app/utils/redis-session.server.ts ./utils/

# Garantir que o script de entrypoint tenha permissão de execução
RUN chmod +x ./express-entrypoint.sh ./supabase-direct-config.sh

# Definir usuário não-root para segurança
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 expressuser \
    && chown -R expressuser:nodejs /app

USER expressuser

# Expõe a porta da aplicação
EXPOSE 5173

# Executa apenas o script de entrypoint do Express
CMD ["bash", "/app/express-entrypoint.sh"]
